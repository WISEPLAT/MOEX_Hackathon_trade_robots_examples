import json
import time
import emoji
from FinamPy import FinamPy
from FinamPy.Config import Config

MAX_ATTEMPTS = 10
WAIT_INTERVAL_SECONDS = 10


def subscribe_and_save_price(asset, result_prices_arr):
    fp_provider = FinamPy(Config.AccessToken)
    print(asset)

    def on_order_book(order_book):
        if asset['code'] not in result_prices_arr:
            result_prices_arr[asset['code']] = order_book.asks[0].price

    fp_provider.on_order_book = on_order_book
    fp_provider.subscribe_order_book(asset['code'], asset['board'], 'orderbook1')

    # –î–æ–±–∞–≤—å—Ç–µ —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –ø–æ–ø—ã—Ç–∫–∞–º
    attempts = 0
    while asset['code'] not in result_prices_arr and attempts < MAX_ATTEMPTS:
        time.sleep(WAIT_INTERVAL_SECONDS)
        attempts += 1

    if asset['code'] not in result_prices_arr:
        print(f"–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è {asset['code']} –Ω–µ –ø—Ä–∏—à–ª–∏ –ø–æ—Å–ª–µ {MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫.")
        return False

    fp_provider.unsubscribe_order_book('orderbook1', asset['code'], asset['board'])
    fp_provider.close_channel()

def calculate_difference(currience, basket_price):
    if currience == usd:
        quarterly = 'Si'
        perpetual = 'USDRUBF'
        x = 1000

    if currience == eur:
        quarterly = 'Eu'
        perpetual = 'EURRUBF'
        x = 1000

    if currience == cny:
        quarterly = 'Cny'
        perpetual = 'CNYRUBF'
        x = 1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –µ—Å—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º —Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
    if len(basket_price) >= 3:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ç–æ—Ä–æ–π –∏ —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç—ã
        values = list(basket_price.values())
        first_element = values[0]
        second_element = values[1]
        third_element = values[2]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        value_first = float(first_element)
        value_second = float(second_element)
        value_third = float(third_element) / x

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
        difference = "{:.3f}".format(value_third - value_second)
        result = f"–°–ø—Ä–µ–¥ {quarterly} - {perpetual}: {difference}\n"

        if float(second_element) > float(first_element):
            difference1 = f"{perpetual}: {'{:.3f}'.format(value_second)} > c–ø–æ—Ç: {'{:.3f}'.format(value_first)}\n"
        if float(second_element) < float(first_element):
            difference1 = f"C–ø–æ—Ç: {'{:.3f}'.format(value_first)} > {perpetual}: {'{:.3f}'.format(value_second)}\n"
        if '{:.3f}'.format(float(second_element)) == '{:.3f}'.format(float(first_element)):
            difference1 = f"C–ø–æ—Ç: {'{:.3f}'.format(value_first)} = {perpetual}: {'{:.3f}'.format(value_second)}\n"

        result = result + difference1
        print(result)

        return result

def write_spread(currience, diff):
    txt = 'usd.txt'
    if currience == eur:
        txt = 'eur.txt'
    if currience == cny:
        txt = 'cny.txt'

    with open(txt, 'w', encoding='utf-8') as file:
        pass
        file.write(diff)

def write_connection_error(currience, diff):
    txt = 'usd.txt'
    if currience == eur:
        txt = 'eur.txt'
    if currience == cny:
        txt = 'cny.txt'

    with open(txt, 'w', encoding='utf-8') as file:
        pass
        file.write(diff)


def write_signal_to_file(signal, signal_txt):
    with open('sig_proc.txt', 'a', encoding='utf-8') as file:
        file.write(signal + '\n')
    with open(signal_txt, 'w') as file:
        pass


# –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è x –∏–∑ —Ñ–∞–π–ª–∞ usd_tvh.txt
def read_x_from_file(tvh_txt):
    try:
        with open(tvh_txt, 'r') as file:
            x = float(file.read())
        return x
    except FileNotFoundError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        return None
    except ValueError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        return None


def read_firstspread_and_signal_from_file(tvh_txt):
    try:
        with open(tvh_txt, 'r') as file:
            data = file.read().split(', ')
            values = [float(value) for value in data]
            return values
    except FileNotFoundError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        return None
    except ValueError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–æ–±–µ–ª–æ–º
        return None



# –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è y –∏–∑ —Ñ–∞–π–ª–∞ usd_signal.txt
def read_y_from_file(signal_txt):
    try:
        with open(signal_txt, 'r') as file:
            y = float(file.read())
        return y
    except FileNotFoundError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        return None
    except ValueError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        return None

def check_signal(curr, spread_txt, tvh_txt, signal_txt):
    with open(spread_txt, 'r', encoding='utf-8') as file:
        lines = file.readlines()
    for line in lines:
        if "–°–ø—Ä–µ–¥" in line:
            parts = line.split()
            x_index = parts.index('–°–ø—Ä–µ–¥') + 4
            spread = parts[x_index]
    z = float(spread)  # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è z
    if read_x_from_file(tvh_txt) is not None and read_y_from_file(signal_txt) is not None:
        x = float(read_x_from_file(tvh_txt))  # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è x
        y = float(read_y_from_file(signal_txt))  # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è y

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª, –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
        if z >= x + x / 100 * y:
            bell_emoji = "üîî"
            signal = f"{bell_emoji}{curr}: —Å–ø—Ä–µ–¥ –≤—ã—Ä–æ—Å –Ω–∞ {y}%"
            write_signal_to_file(signal, signal_txt)
        elif z <= x - x / 100 * y:
            bell_emoji = "üîî"
            signal = f"{bell_emoji}{curr}: —Å–ø—Ä–µ–¥ —Å–Ω–∏–∑–∏–ª—Å—è –Ω–∞ {y}%"
            write_signal_to_file(signal, signal_txt)


def check_only_signal(curr, spread_txt, signal_txt):
    with open(spread_txt, 'r', encoding='utf-8') as file:
        lines = file.readlines()
    for line in lines:
        if "–°–ø—Ä–µ–¥" in line:
            parts = line.split()
            x_index = parts.index('–°–ø—Ä–µ–¥') + 4
            spread = parts[x_index]
    z = float(spread)  # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è z
    if read_firstspread_and_signal_from_file(signal_txt) is not None:
        x = read_firstspread_and_signal_from_file(signal_txt) # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è y


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª, –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
        if float(x[0]) < float(x[1]):
            if z >= float(x[1]):
                bell_emoji = "üîî"
                signal = f"{bell_emoji}{curr}: —Å–ø—Ä–µ–¥ –≤—ã—Ä–æ—Å –¥–æ {x[1]}"
                write_signal_to_file(signal, signal_txt)
        elif  float(x[0]) > float(x[1]):
            if z <= float(x[1]):
                bell_emoji = "üîî"
                signal = f"{bell_emoji}{curr}: —Å–ø—Ä–µ–¥ —Å–Ω–∏–∑–∏–ª—Å—è –¥–æ {x[1]}"
                write_signal_to_file(signal, signal_txt)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ–¥ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–∑–∞—Ö-----------------------------------------------------------------------------
def createTxtFile(txt_file):
    try:
        f = open(txt_file, 'r')
    except FileNotFoundError as err:
        with open(txt_file, 'w') as fw:
            pass

usd = (

    {'board': 'CETS', 'code': 'USD000UTSTOM'},  # USDRUB
    {'board': 'FUT', 'code': 'USDRUBF'},
    {'board': 'FUT', 'code': 'SiZ3'}  # SIZ3
)

eur = (

    {'board': 'CETS', 'code': 'EUR_RUB__TOM'},  # USDRUB
    {'board': 'FUT', 'code': 'EURRUBF'},
    {'board': 'FUT', 'code': 'EuZ3'}  # SIZ3
)

cny = (

    {'board': 'CETS', 'code': 'CNYRUB_TOM'},  # USDRUB
    {'board': 'FUT', 'code': 'CNYRUBF'},
    {'board': 'FUT', 'code': 'CRZ3'}  # SIZ3
)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ —Å–∏–≥–Ω–∞–ª—É
createTxtFile('usd_firstspread_and_signal.txt')
createTxtFile('eur_firstspread_and_signal.txt')
createTxtFile('cny_firstspread_and_signal.txt')

while True:


    try:
        f = open('sig_proc.txt', 'r')
    except FileNotFoundError as err:
        with open('sig_proc.txt', 'w') as fw:
            pass

    # –°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω –∞–∫—Ç–∏–≤–æ–≤
    usd_prices = {}
    eur_prices = {}
    cny_prices = {}

    # –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç–∞–∫–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞
    for asset in usd:
        subscribe_and_save_price(asset, usd_prices)
        if not subscribe_and_save_price(asset, usd_prices):
            write_connection_error(usd, "–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            # –ï—Å–ª–∏ subscribe_and_save_price –≤–µ—Ä–Ω—É–ª–æ False, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ü–∏–∫–ª
            continue

    # –í asset_prices –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–æ–≤
    print(usd_prices)
    diff = calculate_difference(usd, usd_prices)
    if diff is not None:
        write_spread(usd, diff)


    # –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç–∞–∫–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞
    for asset in eur:
        subscribe_and_save_price(asset, eur_prices)
        if not subscribe_and_save_price(asset, eur_prices):
            write_connection_error(eur, "–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            # –ï—Å–ª–∏ subscribe_and_save_price –≤–µ—Ä–Ω—É–ª–æ False, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ü–∏–∫–ª
            continue

    # –í asset_prices –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–æ–≤
    print(eur_prices)
    diff = calculate_difference(eur, eur_prices)
    if diff is not None:
        write_spread(eur, diff)


    # –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç–∞–∫–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞
    for asset in cny:
        subscribe_and_save_price(asset, cny_prices)
        if not subscribe_and_save_price(asset, cny_prices):
            write_connection_error(cny, "–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            # –ï—Å–ª–∏ subscribe_and_save_price –≤–µ—Ä–Ω—É–ª–æ False, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ü–∏–∫–ª
            continue

    # –í asset_prices –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–æ–≤
    print(cny_prices)
    diff = calculate_difference(cny, cny_prices)
    if diff is not None:
        write_spread(cny, diff)



    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, —è –∑–∞–¥–∞–º –∏—Ö —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏________________________________________________________________________________

    check_signal('USD', 'usd.txt', 'usd_tvh.txt', 'usd_signal.txt')
    check_signal('EUR', 'eur.txt', 'eur_tvh.txt', 'eur_signal.txt')
    check_signal('CNY', 'cny.txt', 'cny_tvh.txt', 'cny_signal.txt')
    check_signal('USD', 'usd.txt', 'usd_spread_only.txt', 'usd_signal_only.txt')
    check_signal('EUR', 'eur.txt', 'eur_spread_only.txt', 'eur_signal_only.txt')
    check_signal('CNY', 'cny.txt', 'cny_spread_only.txt', 'cny_signal_only.txt')
    check_only_signal('USD', 'usd.txt', 'usd_firstspread_and_signal.txt')
    check_only_signal('EUR', 'eur.txt', 'eur_firstspread_and_signal.txt')
    check_only_signal('CNY', 'cny.txt', 'cny_firstspread_and_signal.txt')


    time.sleep(5)

